#!/usr/bin/env ruby
#
# Datadog Backups CLI
# Keiran Sweet <Keiran.Sweet@sourcedgroup.com>
#
# This tool provides a way to backup all the dashboards, screenboards and monitors in a
# particular Datadog team from the command line. Each of the objects are dumped in JSON 
# format that is suitable for submitting to the Datadog API to recreate them.
# As such, this means that the backups can be used to restore original copies of a backup
# but also be used to clone dashboards, screenboards and monitors across datadog teams.
#
# This tool uses the DatadogManagement class that provides a set of additional methods to make
# working with the Datadog API's for these administration tasks a little easier.
# It is effectively a wrapper around the Datadog Ruby SDK.
#

require 'date'
require 'rubygems'
require 'dogapi'
require 'json'
require 'fileutils'
require 'getoptlong'
require 'logger'
require 'yaml'
require_relative 'datadogmanagement'

config_yaml = YAML.load_file('datadog-config.yaml')
logger = Logger.new(STDOUT)

# Parse the config block in the configuration file.
backup_config = config_yaml['backup']
unless backup_config
  logger.fatal("The 'backup' block is not found in the configuration file")
  exit 1
end

if backup_config.key?('dateformat_format')
  backup_time = Time.now.strftime(backup_config['datetime_format'])
end

backup_dir = backup_config['dir']
unless backup_dir
  logger.fatal("backup.dir not found in the configuration file")
  exit 1
end

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--team', '-t', GetoptLong::REQUIRED_ARGUMENT ],
)

def print_usage 

  puts "Datadog Backup CLI - Dump Datadog dashboards, screenboards and monitors to JSON backups"
  puts "Usage: #{$0} --help        - Display the help message"
  puts "Usage: #{$0} --team all    - Backup all teams dashboards, screenboards and monitors"
  puts "Usage: #{$0} --team <name> - Backup only team <name> dashboards, screenboards and monitors"
  exit 1

end

if ( ARGV.count < 2 ) 
  print_usage
end 

opts.each do |opt, arg|
  case opt
  when '--help'

    print_usage

  when '--team'
    if arg == 'all'

      @teams = Hash.new
      @teams = config_yaml['teams']

    else

      @teams = Hash.new
      @teams[arg] = config_yaml['teams'][arg]

    end
  end
end

@teams.keys.each do |team|
  logger.info("=> Backing up Datadog team : \'#{team}\'")

  team_config = config_yaml['teams'][team]
  team_backup_dir = File.join(backup_dir, team, backup_time || "")
  name_filter_regex = Regexp.new(team_config['name_filter_regex'])

  datadog = DatadogManagement.new(
    team,
    team_config['apikey'],
    team_config['appkey'],
    team_backup_dir,
    name_filter_regex)
  datadog.backup_screenboards()
  datadog.backup_dashboards()
  datadog.backup_monitors()
end
