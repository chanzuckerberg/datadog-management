#!/usr/bin/env ruby
# Datadog Restore CLI
# Keiran Sweet <Keiran.Sweet@sourcedgroup.com>
#
# This tool provides a way to restore all the dashboards, screenboards and monitors in a
# particular Datadog team from the backups JSON backups produced by the datadog-backups-cli tool
#
# This tool uses the DatadogManagement class that provides a set of additional methods to make
# working with the Datadog API's for these administration tasks a little easier.
# It is effectively a wrapper around the Datadog Ruby SDK.
#

require 'date'
require 'rubygems'
require 'dogapi'
require 'json'
require 'fileutils'
require 'getoptlong'
require 'yaml'
require_relative 'datadogmanagement'

datadogconfig = YAML.load_file('datadog-config.yaml')
logger = Logger.new(STDOUT)

# Parse the config block in the configuration file.
if datadogconfig.key?('config')
  config = datadogconfig['config']

  if config.key?('http_proxy')
    #logger.info("Setting http_proxy from config file to #{config['http_proxy']}")
    ENV['http_proxy'] = config['http_proxy']
  end

  if config.key?('https_proxy')
    #logger.info("Setting https_proxy from config file to #{config['https_proxy']}")
    ENV['https_proxy'] = config['https_proxy']
  end

  if config.key?('dateformat')
    #logger.info("Setting date format from config file to #{config['dateformat']}")
    backupdate = Time.now.strftime(config['dateformat'])
  end

else
  logger.fatal("The config block is not found in the configuration file")
  exit 1
end

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--team', '-t', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--object', '-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--altname', '-a', GetoptLong::OPTIONAL_ARGUMENT ],
)

def print_usage 
    puts "Datadog Restore CLI - Restore Datadog dashboards, screenboards and monitors from JSON backups"
    puts "Usage: #{$0} --help        - Display the help message"
    puts "Usage: #{$0} --team Team1 --object dashboard --file ./dashboard.json"
    puts "Usage: #{$0} --team Team1 --object screenboard --file ./screenboard.json"
    puts "Usage: #{$0} --team Team1 --object monitor --file ./monitor.json"
    exit 1
end
  
if ( ARGV.count < 6 ) 
    print_usage
end 

opts.each do |opt, arg|
  case opt
    when '--help'

      print_usage


    when '--team'
      if arg == 'all'

        @teams = Hash.new
        @teams = datadogconfig['teams']

      else

        @teams = Hash.new
        @teams[arg] = datadogconfig['teams'][arg]

      end

    when '--object'

      @object = arg

    when '--file'

      @filename = arg

    when '--altname'

      @altname = arg

  end
end

@teams.keys.each do |team|
logger.info("Restoring #{@object} to team #{team} from backup file #{@filename}")

  datadog = DatadogManagement.new(
    team,
    datadogconfig['teams'][team]['apikey'],
    datadogconfig['teams'][team]['appkey'])

  payload = JSON.parse(File.read(@filename))

  case @object

    when 'dashboard'

      if defined? @altname
        logger.info("Restoring dashboard with the alternative name #{@altname}")
        payload['dash']['title'] = @altname
      end

      datadog.restore_dashboard(payload['dash'])

    when 'screenboard'

      if defined? @altname
        logger.info("Restoring screenboard with the alternative name #{@altname}")
        payload['board_title'] = @altname
      end

      datadog.restore_screenboard(payload)

    when 'monitor'

      if defined? @altname
        logger.info("Restoring screenboard with the alternative name #{@altname}")
        payload['name'] = @altname
      end

      datadog.restore_monitor(payload)

    else
      puts "Error: Didnt get dashboard , screenboard, monitor"
      exit 1

  end

end
